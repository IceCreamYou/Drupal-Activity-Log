<?php

/**
 * @file
 *   Logs activity on a site.
 */

/**
 * Implementation of hook_menu().
 */
function activity_log_menu() {
  $items = array();
  $items['activity/%activity_log'] = array(
    'title' => 'Activity',
    'description' => 'Displays an activity message.',
    'page callback' => 'theme',
    'page arguments' => array('activity_log_item', 1),
    'access callback' => 'activity_log_access_item',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function activity_log_perm() {
  return array(
    'view all activity logs',
    'view own activity log',
  );
}

/**
 * Determines whether the current user has access to view this activity record.
 */
function activity_log_access_item($record) {
  return ($record->type == 'user' && $record->recipient == $GLOBALS['user']->uid && user_access('view own activity log')) ||
    user_access('view all activity logs');
}

/**
 * Implementation of hook_theme().
 */
function activity_log_theme($existing, $type, $theme, $path) {
  return array(
    'activity_log_item' => array(
      'arguments' => array(
        'aid' => NULL,
      ),
    ),
  );
}

/**
 * Renders an individual activity log message.
 */
function theme_activity_log_item($aid) {
  return '<div class="activity-log-item">'. activity_log_evaluate_record(activity_log_load($aid)) .'</div>';
}

//=====================
//PATHAUTO INTEGRATION.
//=====================

/**
 * Implementation of hook_pathauto().
 */
function activity_log_pathauto($op) {
  if ($op != 'settings') {
    return;
  }
  $tokens = token_get_list('activity_log');
  $placeholders = array();
  foreach ($tokens as $type => $set) {
    if ($type != 'global') {
       foreach ($set as $pattern => $description) {
        $placeholders["[$pattern]"] = $description;
      }
    }
  }
  return (object) array(
    'module' => 'activity_log',
    'token_type' => 'activity_log',
    'groupheader' => t('Activity log settings'),
    'patterndefault' => '', //No aliases should be generated
    'patterndescr' => t('Default path pattern (applies to all activity logs with blank patterns below)'),
    'placeholders' => $placeholders,
    /*'patternitems' => array(
      'self' => t('Own activity logs'),
      'other' => t('Activity logs of other users'),
    ),*/
    'bulkname' => t('Bulk update activity log paths'),
    'bulkdescr' => t('Generate aliases for all existing activity logs which do not already have aliases.'),
  );
}

/**
 * Implementation of hook_pathauto_bulkupdate().
 * Inspired by the node implementation in pathauto_node.inc.
 */
function activity_log_pathauto_bulkupdate() {
  // Only generate aliases for types with patterns defined.
  $pattern_types = array();
  // Check for generic pattern.
  if (trim(variable_get('pathauto_activity_log_pattern', ''))) {
    $pattern_types = array('self', 'other');
  }
  else {
   foreach (array('self', 'other') as $type) {
      if (trim(variable_get('pathauto_activity_log_'. $type .'_pattern', ''))) {
       $pattern_types[$type] = $type;
     }
   }
  }
  $count = 0;
  if (count($pattern_types)) {
    $query = "SELECT al.*, alias.src, alias.dst
      FROM {activity_log_events} al
      LEFT JOIN {url_alias} alias
        ON CONCAT('activity/', CAST(al.aid AS CHAR)) = alias.src
      WHERE alias.src IS NULL";
    $result = db_query_range($query, 0, variable_get('pathauto_max_bulk_update', 50));
    $placeholders = array();
    while ($activity_log = db_fetch_object($result)) {
      // pathauto.inc should already be included.
      $placeholders = pathauto_get_placeholders('activity_log', $activity_log);
      $source = 'activity/'. $activity_log->aid;
      if (pathauto_create_alias('activity_log', 'bulkupdate', $placeholders, $source, $type)) {
        $count++;
      }
    }
  }

  drupal_set_message(format_plural($count,
    'Bulk generation of aliases for activity logs completed: one alias generated.',
    'Bulk generation of aliases for activity logs completed: @count aliases generated.'
  ));

}

/**
 * Implementation of hook_path_alias_types().
 */
function facebook_status_path_alias_types() {
  return array(
    'activity/' => t('Activity Logs'),
  );
}

//==================
//TOKEN INTEGRATION.
//==================
function activity_log_token_list($type = 'all') {
  if($type == 'activity_log' || $type == 'all'){
    $tokens = array(
      'activity_log' => array(
        'activity-id' => t('The ID of the logged activity'),
      ),
    );
    return $tokens;
  }
}

function activity_log_token_values($type, $object = NULL, $options = array()){
  if($type == 'activity_log'){
    $tokens = array(
      'activity-id' => $object->aid,
    );
    return $tokens;
  }
}

//=================
//MODULE FUNCTIONS.
//=================

/**
 * Loads an activity log record.
 */
function activity_log_load($aid) {
  rules_include('rules');
  $record = db_fetch_object(db_query("SELECT * FROM {activity_log_events} e LEFT JOIN {activity_log_templates} t ON e.rule = t.rule WHERE e.aid = %d", $aid));
  $record->eval_input = unserialize($record->eval_input);
  if (class_exists('rules_variable')) {
    $record->id_map = unserialize($record->id_map);
  }
  return $record;
}

/**
 * Renders an activity record.
 */
function activity_log_evaluate_record($record) {
  if ($cache = cache_get('aid '. $record->aid, 'cache_activity_log')) {
    return $cache->data;
  }
  rules_include('rules');
  $element = array('#settings' => array(
    'template' => $record->template,
    'rule' => $record->rule,
    '#eval input' => $record->eval_input,
  ));
  $state = $record->id_map['state'];
  foreach ($state['variables'] as $type => $info) {
    $info->data->_data = activity_log_get_variable($type, $record->id_map);
  }
  rules_apply_input_evaluators($element, $state);
  $text = $element['#settings']['template'];
  $text = drupal_substr($text, 0, strrpos($text, '#activity_log_id_map:'));
  cache_set('aid '. $record->aid, $text, 'cache_activity_log', CACHE_TEMPORARY);
  return $text;
}

/**
 * Loads an array of objects that Token will use for evaluation.
 */
function activity_log_get_variable($type, $id_map) {
  if (class_exists($id_map[$type]['class'])) {
    $object = new $id_map[$type]['class'];
    return $object->load($id_map[$type]['id']);
  }
}
