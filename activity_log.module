<?php

/**
 * @file
 *   Logs activity using Rules.
 */

define(ACTIVITY_LOG_DELIMITER, '#!ACTIVITY_LOG_DELIMITER:');

//============================
// CORE HOOK IMPLEMENTATIONS.
//============================

/**
 * Implementation of hook_menu().
 */
function activity_log_menu() {
  $items = array();
  $items['admin/settings/activity_log'] = array(
    'title' => 'Activity Log',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('activity_log_admin'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Allows administrators to adjust settings for Activity Log.',
    'file' => 'activity_log.admin.inc',
  );
  $items['activity_log/autocomplete/public_name'] = array(
    'title' => 'Autocomplete Activity Log Public Name',
    'page callback' => 'activity_log_autocomplete_public_name',
    'access arguments' => array('view own activity messages'),
    'file' => 'activity_log.rules.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function activity_log_perm() {
  return array(
    'configure preferences for which activity types appear in activity streams',
    'view all activity messages',
    'view own activity messages',
  );
}

/**
 * Implementation of hook_user().
 */
function activity_log_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'form' && user_access('configure preferences for which activity types appear in activity streams', $account)) {
    $form = array();
    $form['activity_log'] = array(
      '#type' => 'fieldset',
      '#title' => t('Activity stream settings'),
      '#description' => t('Enable or disable the types of activity you would like to see when you view your activity stream.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $result = db_query("SELECT * FROM {activity_log_action_names}");
    $types = array();
    $default_values = array();
    while ($row = db_fetch_object($result)) {
      $types[$row->pid] = t($row->public_name);
      $default_values[$row->pid] = $row->pid;
    }
    $result = db_query("SELECT pid FROM {activity_log_disabled_types} WHERE uid = %d", $account->uid);
    $disabled = array();
    while ($row = db_fetch_object($result)) {
      $default_values[$row->pid] = 0;
      $disabled[] = $row->pid;
    }
    $form['activity_log']['activity_log_types'] = array(
      '#type' => 'checkboxes',
      '#options' => $types,
      '#default_value' => $default_values,
    );
    $form['activity_log']['activity_log_types_all_values'] = array(
      '#type' => 'value',
      '#value' => array_keys($types),
    );
    $form['activity_log']['activity_log_types_disabled_values'] = array(
      '#type' => 'value',
      '#value' => $disabled,
    );
    return $form;
  }
  elseif ($op == 'update' && user_access('configure preferences for which activity types appear in activity streams', $account)) {
    $all = $edit['activity_log_types_all_values'];
    $disabled = $edit['activity_log_types_disabled_values'];
    $values = array_filter($edit['activity_log_types']);
    $delete = array();
    $add = array();
    foreach ($all as $type) {
      // Previously disabled, now enabled; delete record of it being disabled
      if (in_array($type, $disabled) && in_array($type, $values)) {
        $delete[] = $type;
      }
      // Previously enabled, now disabled; add record of it being disabled
      elseif (!in_array($type, $disabled) && !in_array($type, $values)) {
        $add[] = $type;
      }
    }
    if (!empty($delete)) {
      db_query("DELETE FROM {activity_log_disabled_types} WHERE pid IN (". db_placeholders($delete) .")", $delete);
    }
    if (!empty($add)) {
      $subquery = array();
      $args = array();
      foreach ($add as $type) {
        $subquery[] = "(%d, %d)";
        $args[] = $account->uid;
        $args[] = $type;
      }
      db_query("INSERT INTO {activity_log_disabled_types} (uid, pid) VALUES". implode(',', $subquery), $args);
    }
  }
  elseif ($op == 'delete') {
    db_query("
      DELETE FROM {activity_log_events}
      WHERE
        acting_uid = %d OR
        (stream_owner_id = %d AND stream_owner_type = 'user') OR
        (target_id = %d AND target_type = 'user')
    ", $account->uid, $account->uid, $account->uid);
    db_query("
      DELETE FROM {activity_log_messages}
      WHERE
        acting_uid = %d OR
        (stream_owner_id = %d AND stream_owner_type = 'user') OR
        (target_id = %d AND target_type = 'user')
    ", $account->uid, $account->uid, $account->uid);
    db_query("DELETE FROM {activity_log_disabled_types} WHERE uid = %d", $account->uid);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function activity_log_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'delete') {
    db_query("
      DELETE FROM {activity_log_events}
      WHERE
        (stream_owner_id = %d AND stream_owner_type = 'node') OR
        (target_id = %d AND target_type = 'node')
    ", $node->nid, $node->nid);
    db_query("
      DELETE FROM {activity_log_messages}
      WHERE
        (stream_owner_id = %d AND stream_owner_type = 'node') OR
        (target_id = %d AND target_type = 'node')
    ", $node->nid, $node->nid);
  }
}

/**
 * Implementation of hook_cron().
 */
function activity_log_cron() {
  // Delete event logs.
  $time = time() - (86400 * variable_get('activity_log_maxage', 30));
  db_query("DELETE FROM {activity_log_events} WHERE created < %d", $time);
  db_query("DELETE FROM {activity_log_messages} WHERE last_updated < %d", $time);
}

/**
 * Implementation of hook_theme().
 */
function activity_log_theme($existing, $type, $theme, $path) {
  return array(
    'activity_log_item' => array(
      'arguments' => array(
        'aid' => NULL,
      ),
    ),
    'activity_log_collapse' => array(
      'arguments' => array(
        'collection' => array(),
      ),
    ),
  );
}

//==================
// THEME FUNCTIONS.
//==================

/**
 * Renders an individual activity log message.
 *
 * @param $record
 *   A fully qualified activity record.
 * @return
 *   The themed activity message.
 */
function theme_activity_log_item($record) {
  return '<div class="activity-message">'. activity_log_evaluate_record($record) .'</div>';
}

/**
 * Collapses an array to a string summarizing its elements.
 *
 * Depending on the number of elements in the collection, the result could be
 * in one of the following formats:
 * - [nothing]
 * - Joe
 * - Jack and Jill
 * - Jack, Jill, and Joe
 * - Jane, Jim, and N other people
 */
function theme_activity_log_collapse($collection = array()) {
  $count = count($collection);
  if ($count == 0) {
    return;
  }
  elseif ($count === 1) {
    $output = $collection[0];
  }
  elseif ($count == 2) {
    $output = t('!first and !second', array('!first' => $collection[0], '!second' => $collection[1]));
  }
  elseif ($count == 3) {
    $output = t('!first, !second, and !third', array(
      '!first' => $collection[0],
      '!second' => $collection[1],
      '!third' => $collection[2],
    ));
  }
  else {
    $first = array_pop($collection);
    $second = array_pop($collection);
    $output = t('!first, !second, and <a class="activity-log-collection-more" href="!here">@count others</a>', array(
      '!first' => $first,
      '!second' => $second,
      '!here' => url($_GET['q'], array('absolute' => TRUE)),
      '@count' => $count - 2,
    ));
  }
  return '<span class="activity-log-collection">'. $output .'</span>';
}

//====================================
// APPLICATION PROGRAMMING INTERFACE.
//====================================

/**
 * Loads an activity log record.
 *
 * @param $mid
 *   The ID of the activity message to load.
 * @return
 *   A full Activity record.
 */
function activity_log_load($mid) {
  $record = db_fetch_object(db_query("
    SELECT *
    FROM {activity_log_messages} m
    LEFT JOIN {activity_log_templates} t
      ON m.tid = t.tid
    WHERE mid = %d
  ", $mid));
  $record->eval_input = unserialize($record->eval_input);
  rules_include('rules');
  $aids = explode(',', $record->aids);
  $record->events = array();
  $result = db_query("
    SELECT * FROM {activity_log_events} WHERE aid IN (". db_placeholders($aids) .")
  ", $aids);
  while ($event = db_fetch_object($result)) {
    $event->id_map = unserialize($event->id_map);
    $record->events[$event->aid] = $event;
  }
  return $record;
}

/**
 * Evaluate the template for a given activity record.
 *
 * @param $record
 *   The activity record whose template should be evaluated.
 * @return
 *   The text of an activity message.
 */
function activity_log_evaluate_record($record) {
  $time = time();
  rules_include('rules');
  // Get the stored data we need to apply the Rules input evaluators.
  $master_element = array('#settings' => array(
    'grouping' => array(
      'group_summary' => $record->group_summary,
      'group_template' => $record->group_template,
    ),
    'template' => $record->template,
    'stream_owner' => '',
    'acting_user' => '',
    'tid' => $record->tid,
    '#eval input' => $record->eval_input,
  ));
  // Evaluate all of our grouped events.
  $template = '';
  $group_template = '';
  $names = array();
  $collection = array();
  foreach ($record->events as $event) {
    $element = $master_element;
    // Reconstruct the Rules State as if the event was triggered just now.
    $state = $event->id_map['state'];
    foreach ($state['variables'] as $type => $info) {
      $info->data->_data = activity_log_get_variable($type, $event->id_map);
    }
    // Apply the Rules input evaluators.
    rules_apply_input_evaluators($element, $state);
    // Keep track of the evaluated templates.
    $template = $element['#settings']['template'];
    $group_template = $element['#settings']['grouping']['group_template']; // same for every event
    // Compute the group template variables.
    if (strpos($group_template, '[names]') !== FALSE) {
      $acting_user = activity_log_user_load($event->acting_uid);
      $names[] = theme('username', $acting_user);
    }
    if (strpos($group_template, '[collection]') !== FALSE) {
      $collection[] = $element['#settings']['grouping']['group_summary'];
    }
  }
  if (count($record->events) === 1) {
    return $template;
  }
  return str_replace(
    array('[names]', '[collection]'),
    array(
      theme('activity_log_collapse', $names),
      theme('activity_log_collapse', $collection)
    ),
    $group_template
  );
}

//===================
// HELPER FUNCTIONS.
//===================

/**
 * Load an object in its current state so that we can replace the old version.
 *
 * It is mostly important to do this so that Token executes the correct
 * replacements. We load the new objects by identifying their Rules class type
 * and executing its load() method.
 */
function activity_log_get_variable($type, $id_map) {
  if (class_exists($id_map[$type]['class'])) {
    $object = new $id_map[$type]['class'];
    return $object->load($id_map[$type]['id']);
  }
}

/**
 * Wraps user_load() so it can be statically cached.
 *
 * @param $uid
 *   A User ID.
 * @return
 *   A $user object.
 */
function activity_log_user_load($uid) {
  static $accounts = array();
  if (!isset($accounts[$uid])) {
    $accounts[$uid] = user_load(array('uid' => $uid));
  }
  return $accounts[$uid];
}

//====================
// TOKEN INTEGRATION.
//====================

/**
 * Implementation of hook_token_list().
 */
function activity_log_token_list($type = 'all') {
  if ($type == 'activity_log') {
    $tokens = array(
      'activity_log' => array(
        'activity-id' => t('The ID of the logged activity'),
        'activity-objects' => t('A comma-separated list of the types of objects the activity is about.'),
        'activity-template-id' => t('The ID of the template used to generate the activity message.'),
        'activity-stream-id' => t('The ID of the entity in whose stream the activity message appears.'),
        'activity-stream-type' => t('The type of the entity in whose stream the activity message appears.'),
        'activity-message' => t('The full activity message.'),
        'activity-message-clean' => t('The activity message with no HTML tags. Useful in URLs.'),
        'activity-message-clean-40' => t('The activity message with no HTML tags, cut off at 40 characters. Useful in URLs.'),
      ),
    );
    return $tokens;
  }

  // Move into a patch for the Flag module.
  $tokens = array();
  foreach (flag_get_types() as $flag_type) {
    if ($type == $flag_type || $type == 'all') {
      $flags = flag_get_flags($flag_type);
      foreach ($flags as $flag) {
        $tokens[$flag_type]['flag-'. str_replace('_', '-', $flag->name) .'-link'] = t('(Un)flag link for the "@flag" flag.', array('@flag' => $flag->get_title()));
      }
    }
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function activity_log_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'activity_log') {
    $event = array_shift($object->events);
    $keys = array_keys($event->id_map);
    array_pop($keys); // Remove the "state" key
    $activity_objects = implode(',', $keys);
    $message = activity_log_evaluate_record($object);
    $tokens = array(
      'activity-id' => $object->mid,
      'activity-objects' => $activity_objects,
      'activity-template-id' => $activity->tid,
      'activity-stream-id' => $object->stream_owner_id,
      'activity-stream-type' => $object->stream_owner_type,
      'activity-message' => $message,
      'activity-message-clean' => strip_tags($message),
      'activity-message-clean-40' => drupal_substr(strip_tags($message), 0, 40),
    );
    $tokens += token_get_date_token_values($object->created, 'last_updated-');
    return $tokens;
  }

  // Move into a patch for the Flag module.
  if (in_array($type, flag_get_types())) {
    $values = array();
    $flags = flag_get_flags($type);
    foreach ($flags as $flag) {
      $values['flag-'. str_replace('_', '-', $flag->name) .'-link'] = flag_create_link($flag->name, $flag->get_content_id($object));
    }
    return $values;
  }
}

//===========================
// RADIOACTIVITY INTEGRATION
//===========================

/**
 * Implementation of hook_radioactivity_info().
 */
function activity_log_radioactivity_info() {
  $rules = rules_get_configured_items();
  $info = array('sources' => array('activity_log' => array()), 'targets' => array('activity_log' => array()));
  $result = db_query("SELECT tid, rule, action_label FROM {activity_log_templates}");
  while ($template = db_fetch_object($result)) {
    // The title_placeholder eventually gets run through check_plain().
    $info['sources']['activity_log'][$template->tid] = array(
      'title_placeholder' => $rules[$template->rule]['#label'] .' - '. $template->action_label,
    );
  }
  return $info;
}

/**
 * Implementation of hook_activity_log_event().
 */
function activity_log_activity_log_event($record, $settings) {
  module_load_include('inc', 'radioactivity');
  radioactivity_add_energy($record->aid, 'activity_log', $record->tid);
}

//=====================================
// FACEBOOK-STYLE STATUSES INTEGRATION
//=====================================

/**
 * Implementation of hook_facebook_status_delete().
 */
function activity_log_facebook_status_delete($status, $meta = array()) {
  db_query("
    DELETE FROM {activity_log_events}
    WHERE
      (stream_owner_id = %d AND stream_owner_type = 'facebook_status') OR
      (target_id = %d AND target_type = 'facebook_status')
  ", $status->sid, $status->sid);
  db_query("
    DELETE FROM {activity_log_messages}
    WHERE
      (stream_owner_id = %d AND stream_owner_type = 'facebook_status') OR
      (target_id = %d AND target_type = 'facebook_status')
  ", $status->sid, $status->sid);
}


//===================
// VIEWS INTEGRATION
//===================

/**
 * Implementation of hook_views_api().
 */
function activity_log_views_api(){
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'activity_log') . '/views',
  );
}

