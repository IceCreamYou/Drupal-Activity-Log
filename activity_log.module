<?php

/**
 * @file
 *   Logs activity using Rules.
 */

define(ACTIVITY_LOG_DELIMITER, '#!ACTIVITY_LOG_DELIMITER:');

//============================
// CORE HOOK IMPLEMENTATIONS.
//============================

/**
 * Implementation of hook_menu().
 */
function activity_log_menu() {
  $items = array();
  $items['admin/settings/activity_log'] = array(
    'title' => 'Activity Log',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('activity_log_admin'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Allows administrators to adjust settings for Activity Log.',
    'file' => 'activity_log.admin.inc',
  );
  $items['activity/%activity_log'] = array(
    'title callback' => 'activity_log_title_callback',
    'title arguments' => array(1),
    'description' => 'Displays an activity message.',
    'page callback' => 'theme',
    'page arguments' => array('activity_log_item', 1),
    'access callback' => 'activity_log_access_item',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['activity_log/autocomplete/public_name'] = array(
    'title' => 'Autocomplete Activity Log Public Name',
    'page callback' => 'activity_log_autocomplete_public_name',
    'access arguments' => array('view own activity messages'),
    'type' => MENU_CALLBACK,
    'file' => 'activity_log.rules.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function activity_log_perm() {
  return array(
    'disable viewing certain activity types in activity streams',
    'view all activity messages',
    'view own activity messages',
  );
}

/**
 * Implementation of hook_user().
 */
function activity_log_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'form') {
    $form = array();
    $form['activity_log'] = array(
      '#type' => 'fieldset',
      '#title' => t('Activity stream settings'),
      '#description' => t('Enable or disable the types of activity you would like to see when you view your activity stream.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $result = db_query("SELECT DISTINCT(public_name) AS title FROM {activity_log_templates} WHERE public_name <> ''");
    $types = array();
    $default_values = array();
    while ($row = db_fetch_object($result)) {
      $types[$row->title] = t($row->title);
      $default_values[$row->title] = $row->title;
    }
    $result = db_query("SELECT activity_type FROM {activity_log_disabled_types} WHERE uid = %d", $account->uid);
    $disabled = array();
    while ($row = db_fetch_object($result)) {
      $default_values[$row->activity_type] = 0;
      $disabled[] = $row->activity_type;
    }
    $form['activity_log']['activity_log_types'] = array(
      '#type' => 'checkboxes',
      '#options' => $types,
      '#default_value' => $default_values,
    );
    $form['activity_log']['activity_log_types_all_values'] = array(
      '#type' => 'value',
      '#value' => array_keys($types),
    );
    $form['activity_log']['activity_log_types_disabled_values'] = array(
      '#type' => 'value',
      '#value' => $disabled,
    );
    return $form;
  }
  elseif ($op == 'update') {
    $all = $edit['activity_log_types_all_values'];
    $disabled = $edit['activity_log_types_disabled_values'];
    $values = array_filter($edit['activity_log_types']);
    $delete = array();
    $add = array();
    foreach ($all as $type) {
      // Previously disabled, now enabled; delete record of it being disabled
      if (in_array($type, $disabled) && in_array($type, $values)) {
        $delete[] = $type;
      }
      // Previously enabled, now disabled; add record of it being disabled
      elseif (!in_array($type, $disabled) && !in_array($type, $values)) {
        $add[] = $type;
      }
    }
    if (!empty($delete)) {
      db_query("DELETE FROM {activity_log_disabled_types} WHERE activity_type IN (". db_placeholders($delete, 'text') .")", $delete);
    }
    if (!empty($add)) {
      $subquery = array();
      $args = array();
      foreach ($add as $type) {
        $subquery[] = "(%d, '%s')";
        $args[] = $account->uid;
        $args[] = $type;
      }
      db_query("INSERT INTO {activity_log_disabled_types} (uid, activity_type) VALUES". implode(',', $subquery), $args);
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function activity_log_theme($existing, $type, $theme, $path) {
  return array(
    'activity_log_item' => array(
      'arguments' => array(
        'aid' => NULL,
      ),
    ),
  );
}

/**
 * Implementation of hook_cron().
 */
function activity_log_cron(){
  // Delete event logs
  db_query('DELETE from {activity_log_events} WHERE created <= %d', time() - (86400 * variable_get('activity_log_maxage', 30)));
  // Delete any stray recipient mappings
  db_query('DELETE from {activity_log_recipients} WHERE aid NOT IN (SELECT aid FROM activity_log_events)');
}

//==================
// THEME FUNCTIONS.
//==================

/**
 * Renders an individual activity log message.
 *
 * @param $record
 *   A fully qualified activity record.
 * @return
 *   The themed activity message.
 */
function theme_activity_log_item($record) {
  return '<div class="activity-message">'. activity_log_evaluate_record($record) .'</div>';
}

//====================================
// APPLICATION PROGRAMMING INTERFACE.
//====================================

/**
 * Loads an activity log record.
 *
 * @param $aid
 *   The ID of the activity record to load.
 * @return
 *   A full Activity record.
 */
function activity_log_load($aid) {
  rules_include('rules');
  $record = db_fetch_object(db_query("
    SELECT *
    FROM {activity_log_events} e
    LEFT JOIN {activity_log_templates} t
      ON e.tid = t.tid
    WHERE e.aid = %d
  ", $aid));
  $record->eval_input = unserialize($record->eval_input);
  if (class_exists('rules_variable')) {
    $record->id_map = unserialize($record->id_map);
  }
  return $record;
}

/**
 * Evaluate the template for a given activity record.
 *
 * @param $record
 *   The activity record whose template should be evaluated.
 * @return
 *   The text of an activity message.
 */
function activity_log_evaluate_record($record) {
  $time = time();
  rules_include('rules');
  // Get the stored data we need to apply the Rules input evaluators.
  $element = array('#settings' => array(
    'template' => $record->template,
    'tid' => $record->tid,
    '#eval input' => $record->eval_input,
  ));
  // Reconstruct the Rules State as if the event was triggered just now.
  $state = $record->id_map['state'];
  foreach ($state['variables'] as $type => $info) {
    $info->data->_data = activity_log_get_variable($type, $record->id_map);
  }
  // Apply the Rules input evaluators.
  rules_apply_input_evaluators($element, $state);
  // Return the evaluated template.
  return $element['#settings']['template'];
}

//===================
// HELPER FUNCTIONS.
//===================

/**
 * Load an object in its current state so that we can replace the old version.
 *
 * It is mostly important to do this so that Token executes the correct
 * replacements. We load the new objects by identifying their Rules class type
 * and executing its load() method.
 */
function activity_log_get_variable($type, $id_map) {
  if (class_exists($id_map[$type]['class'])) {
    $object = new $id_map[$type]['class'];
    return $object->load($id_map[$type]['id']);
  }
}

//=================
// MENU CALLBACKS.
//=================

/**
 * Determines the title to display on an individual activity page.
 *
 * @param $record
 *   A fully qualified activity record.
 * @return
 *   A string for the title of an activity page.
 */
function activity_log_title_callback($record) {
  $message = t('Activity');
  if ($record->stream_owner_type == 'user') {
    $account = user_load($record->stream_owner_id);
    $message = t("@name's activity", array('@name' => $account->name));
  }
  elseif ($record->stream_owner_type == 'node') {
    $node = node_load($record->stream_owner_id);
    $message = t("Activity on @title", array('@title' => $node->title));
  }
  return $message;
}

/**
 * Determines whether the current user has access to view this activity record.
 *
 * @param $record
 *   The activity record to which access is requested.
 * @param $account
 *   (Optional) The account of the user requesting access. Defaults to the
 *   current user.
 * @return
 *   TRUE if access is permitted; FALSE otherwise.
 */
function activity_log_access_item($record, $account = NULL) {
  // Default to the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  // Grant access to the intended stream owner and administrators.
  return ($record->stream_owner_type == 'user' && $record->stream_owner_id == $account->uid && user_access('view own activity messages', $account)) ||
    user_access('view all activity messages', $account);
}

//=======================
// PATHAUTO INTEGRATION.
//=======================

/**
 * Implementation of hook_pathauto().
 */
function activity_log_pathauto($op) {
  if ($op != 'settings') {
    return;
  }
  $tokens = token_get_list('activity_log');
  $placeholders = array();
  foreach ($tokens as $type => $set) {
    if ($type != 'global') {
       foreach ($set as $pattern => $description) {
        $placeholders["[$pattern]"] = $description;
      }
    }
  }
  return (object) array(
    'module' => 'activity_log',
    'token_type' => 'activity_log',
    'groupheader' => t('Activity Log settings'),
    'patterndefault' => '', // No aliases should be generated by default.
    'patterndescr' => t('Default path pattern'),
    'placeholders' => $placeholders,
    'bulkname' => t('Bulk update Activity Log paths'),
    'bulkdescr' => t('Generate aliases for all existing activity records which do not already have aliases.'),
  );
}

/**
 * Implementation of hook_pathauto_bulkupdate().
 * Inspired by the node implementation in pathauto_node.inc.
 */
function activity_log_pathauto_bulkupdate() {
  // Get all activity records that have no path alias.
  $result = db_query_range("
    SELECT al.*, alias.src, alias.dst
    FROM {activity_log_events} al
    LEFT JOIN {url_alias} alias
      ON CONCAT('activity/', CAST(al.aid AS CHAR)) = alias.src
    WHERE alias.src IS NULL
  ", 0, variable_get('pathauto_max_bulk_update', 50));
  // Set an alias for these records.
  $count = 0;
  $placeholders = array();
  while ($activity_log = db_fetch_object($result)) {
    // We can call this function because pathauto.inc should already be included.
    $placeholders = pathauto_get_placeholders('activity_log', $activity_log);
    $source = 'activity/'. $activity_log->aid;
    if (pathauto_create_alias('activity_log', 'bulkupdate', $placeholders, $source, $type)) {
      $count++;
    }
  }
  // Report what we just did.
  drupal_set_message(format_plural($count,
    'Bulk generation of aliases for activity logs completed: one alias generated.',
    'Bulk generation of aliases for activity logs completed: @count aliases generated.'
  ));
}

/**
 * Implementation of hook_path_alias_types().
 */
function facebook_status_path_alias_types() {
  return array(
    'activity/' => t('Activity message'),
  );
}

//====================
// TOKEN INTEGRATION.
//====================

/**
 * Implementation of hook_token_list().
 */
function activity_log_token_list($type = 'all') {
  if ($type == 'activity_log') {
    $tokens = array(
      'activity_log' => array(
        'activity-id' => t('The ID of the logged activity'),
        'activity-objects' => t('A comma-separated list of the types of objects the activity is about.'),
        'activity-template-id' => t('The ID of the template used to generate the activity message.'),
        'activity-stream-id' => t('The ID of the entity in whose stream the activity message appears.'),
        'activity-stream-type' => t('The type of the entity in whose stream the activity message appears.'),
        'activity-message' => t('The full activity message.'),
        'activity-message-clean' => t('The activity message with no HTML tags. Useful in URLs.'),
        'activity-message-clean-40' => t('The activity message with no HTML tags, cut off at 40 characters. Useful in URLs.'),
      ),
    );
    return $tokens;
  }
  
  // Move into a patch for flage
  $tokens = array();
  foreach (flag_get_types() as $flag_type) {
    if ($type == $flag_type || $type == 'all') {
      $flags = flag_get_flags($flag_type);
      foreach ($flags as $flag) {
        $tokens[$flag_type]['flag-'. str_replace('_', '-', $flag->name) .'-link'] = t('Flag/unflag link for @flag', array('@flag' => $flag->get_title()));
      }
    }
  }
  return $tokens;

}

/**
 * Implementation of hook_token_values().
 */
function activity_log_token_values($type, $object = NULL, $options = array()){
  if ($type == 'activity_log') {
    $keys = array_keys($object->id_map);
    array_pop($keys); // Remove the "state" key
    $activity_objects = implode(',', $keys);
    $message = activity_log_evaluate_record($object);
    $tokens = array(
      'activity-id' => $object->aid,
      'activity-objects' => $activity_objects,
      'activity-template-id' => $activity->tid,
      'activity-stream-id' => $object->stream_owner_id,
      'activity-stream-type' => $object->stream_owner_type,
      'activity-message' => $message,
      'activity-message-clean' => strip_tags($message),
      'activity-message-clean-40' => drupal_substr(strip_tags($message), 0, 40),
    );
    $tokens += token_get_date_token_values($object->created, 'created-');
    return $tokens;
  }
  
  // Move into a patch for the flags module
  if (in_array($type, flag_get_types())) {
    $values = array();
    $flags = flag_get_flags($type);
    foreach ($flags as $flag) {
      $values['flag-'. str_replace('_', '-', $flag->name) .'-link'] = flag_create_link($flag->name, $flag->get_content_id($object));
    }
    return $values;
  }

}
